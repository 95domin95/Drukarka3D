@model Drukarka3DData.Models.OrderViewModel

<environment include="Development">
    <script src="~/js/stl.js"></script>
</environment>

<div class="box">
    <div class="row">
        <div class="col-xs-12">
            @if (!Model.Order.First().Status.Equals("Przyjęto"))
            {
                @if(Model.Order.First().Status.Equals("Zatwierdzono"))
                {
                    <div class="alert alert-success" role="alert">
                        @Model.Order.First().Status
                    </div>

                }
                else
                {
                    <div class="alert alert-danger" role="alert">
                        @Model.Order.First().Status
                    </div>

                }

            }
        </div>
    </div>

    <div class="row" style="background-color: #b3ffff;margin-left: auto;margin-right: auto; margin-bottom: 10px">
        <div class="col-sm-12">
            <h4>Panel użytkownika</h4>
        </div>
        <div class="col-sm-6 col-xs-6" style="text-align: right">
            <div style="margin-top:5px">
                @if (Model.Order.First().Private)
                {
                    <label>Projekt publiczny: <input id="isPrivate" type="checkbox" /></label>
                }
                else
                {
                    <label>Projekt publiczny: <input id="isPrivate" type="checkbox" checked /></label>
                }            
                <button type="submit" class="btn btn-primary" id="confirm" style="margin-bottom: 10px">Zmień</button>
                <form method="get">
                    <button asp-controller="Account" asp-action="RemoveProject" name="OrderId" value="@Model.Order.First().OrderId" type="submit" class="btn btn-default" id="confirm" style="margin-bottom: 10px">Usuń <span class="glyphicon glyphicon-remove" style="color: red"></span></button>
                </form>    
            </div>
            <script>
                window.addEventListener("load", function () {
                    $("#confirm").click(function () {
                        var isPrivate = $("#isPrivate").prop("checked");

                        var id = @Model.Order.First().OrderId;

                        var privacy = { "IsPrivate": isPrivate, "Id": id };

                        $.ajax({
                            type: 'POST',
                            url: 'ProjectShare',
                            data: JSON.stringify(privacy),
                            dataType: 'JSON',
                            contentType: "application/json; charset=utf-8"
                        });
                    });
                    $("#print").click(function () {

                        var data = { "FilePath": "@Model.Order.FirstOrDefault().Path" };

                        $.ajax({
                            type: 'POST',
                            url: 'Print',
                            data: JSON.stringify(data),
                            dataType: 'JSON',
                            contentType: "application/json; charset=utf-8"
                        }).done(function (data) {
                            alert("Wysłano do druku");
                        });;
                    });
                }, false);
            </script>
        </div>
        <div class="col-sm-6 col-xs-6" style="text-align: left">
            <button type="submit" class="btn btn-primary" id="print" style="margin-bottom: 10px; margin-top: 5px">Drukuj <span class="glyphicon glyphicon-print"></span></button>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <div id="projectView"></div>
        </div>
        <div class="col-sm-12 col-xs-12" style="font-size: x-large; margin-top: 3px;">
            @Model.Order.First().Name
        </div>
        <div class="col-sm-12 col-xs-12">
            <div id="@Model.Order.First().OrderId" style="margin: auto"></div>
            <script>
                window.addEventListener("load", function () {
                    "use strict";

                    $("#like-btn").click(function () {

                        if ("@Model.IsLiked" === "True") {
                            var likesDec = @Model.Order.First().Likes - 1;

                            $('#likes-count-div').html(likesDec);

                            var orderId = "@Model.Order.First().OrderId";

                            var data = { "OrderId": orderId };

                            $.ajax({
                                method: 'POST',
                                url: 'RemoveFromFavouritesAsync',
                                data: JSON.stringify(data),
                                dataType: 'JSON',
                                contentType: "application/json; charset=utf-8"
                            }).done(function () {
                                document.location.reload();
                            }).fail(function () {
                                document.location.reload();
                            });



                        }
                        else {
                            //$("#like-btn").prop('disabled', true);

                            var likesInc = @Model.Order.First().Likes + 1;

                            $('#likes-count-div').html(likesInc);

                            var orderId = "@Model.Order.First().OrderId";

                            var data = { "OrderId": orderId };

                            $.ajax({
                                method: 'POST',
                                url: 'AddToFavouritesAsync',
                                data: JSON.stringify(data),
                                dataType: 'JSON',
                                contentType: "application/json; charset=utf-8"
                            }).done(function () {
                                document.location.reload();
                            }).fail(function () {
                                document.location.reload();
                            });;

                        }

                    });

                    $("#projectView").css("width", function () {
                        return $(window).width() * 0.7;
                    });
                    $("#projectView").css("height", function () {
                        return $(window).width() * 0.4;
                    });

                    $("#@Model.Order.First().OrderId").rateYo({
                        rating: parseFloat(@Model.Order.First().Rate.ToString().Replace(",", ".")) > 5 ? 0 : parseFloat(@Model.Order.First().Rate.ToString().Replace(",", ".")),
                        readOnly: true,
                        onSet: function (rating, rateYoInstance) {

                            var data = { "Rate": rating, "Id": @Model.Order.First().OrderId.ToString() };

                            $.ajax({
                                type: 'POST',
                                url: 'UpdateRating',
                                data: JSON.stringify(data),
                                dataType: 'JSON',
                                contentType: "application/json; charset=utf-8"
                            });
                        }
                    });

                    var w = $(window).width() * 0.7, h = $(window).width() * 0.4;

                    var renderer = new THREE.WebGLRenderer({
                        preserveDrawingBuffer: true
                    });

                    renderer.setSize(w, h);
                    var view = document.getElementById("projectView");
                    view.appendChild(renderer.domElement);

                    var camera = new THREE.PerspectiveCamera(45, w / h, 1, 1000);
                    camera.position.set(0, 0, 50);
                    var controls = new THREE.TrackballControls(camera, view);

                    var scene = new THREE.Scene();
                    scene.add(new THREE.AmbientLight(0x666666));

                    var light1 = new THREE.DirectionalLight(0xffffff);
                    light1.position.set(0, 100, 100);
                    scene.add(light1);

                    var light2 = new THREE.DirectionalLight(0xffffff);
                    light2.position.set(0, -100, -100);
                    scene.add(light2);

                    var mat = new THREE.MeshPhongMaterial({
                        color: 0x339900, ambient: 0x339900, specular: 0x030303
                    });
                    var obj = new THREE.Mesh(new THREE.Geometry(), mat);
                    scene.add(obj);

                    var loop = function loop() {
                        requestAnimationFrame(loop);
                        //obj.rotation.z += 0.05;
                        controls.update();
                        renderer.clear();
                        renderer.render(scene, camera);
                    };

                    loop();

                    // file load
                    var openFile = function (file) {
                        var reader = new FileReader();
                        reader.addEventListener("load", function (ev) {
                            var buffer = ev.target.result;
                            var geom = loadStl(buffer);
                            scene.remove(obj);
                            obj = new THREE.Mesh(geom, mat);
                            scene.add(obj);
                        }, false);
                        reader.readAsArrayBuffer(file);
                    };

                    (function () {
                        var xhr = new XMLHttpRequest();
                        xhr.open('GET', '/DoZatwierdzenia/@Model.Order.First().Path', true);
                         xhr.responseType = 'blob';

                         xhr.onload = function (e) {
                             if (this.status == 200) {
                                 // get binary data as a response
                                 var blob = this.response;
                                 openFile(blob);
                             }
                         };

                         xhr.send();

                    })();

                    }, false);

                    function checkForValidFileExtension(elemVal) {
                        var fp = elemVal;
                        if (fp.indexOf('.') === -1)
                            return false;

                        var allowedExts = new Array("stl");
                        var ext = fp.substring(fp.lastIndexOf('.') + 1).
                            toLowerCase();

                        for (var i = 0; i < allowedExts.length; i++) {
                            if (ext === allowedExts[i]) return true;
                        }

                        return false;
                    }
            </script>

        </div>
        <div class="col-sm-12">Data dodania: @Model.Order.First().UploadDate</div>
        <div class="col-sm-12">Status: @Model.Order.First().Status</div>
        <div class="col-sm-12">Liczba wyświetleń: @Model.Order.First().ViewsCount</div>
        <div class="col-sm-12">
            @if (!Model.IsSignedIn)
            {
                <button type="submit" class="btn btn-link" id="like-btn" disabled>
                    <span class="glyphicon glyphicon-heart" style="font-size: x-large; color: red"></span><div style="font-size: large">@Model.LikesCount</div>
                </button>
            }
            else
            {
                <button type="submit" class="btn btn-link" id="like-btn">
                    <span class="glyphicon glyphicon-heart" style="font-size: x-large; color: red"></span><div id="likes-count-div" style="font-size: large">@Model.LikesCount</div>
                </button>

            }

        </div>
        <div class="col-sm-12" style="margin-bottom: 10px;"><label><a class="btn btn-primary" role="button" asp-action="Download" asp-controller="Home" asp-route-filename="@Model.Order.First().Path">Pobierz <span class="glyphicon glyphicon-download"></span></a></label></div>
    </div>
</div>
